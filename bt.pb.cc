// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "external/aic/btd/bt.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* btPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  btPayload_reflection_ = NULL;
const ::google::protobuf::Descriptor* btPayload_BtifPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  btPayload_BtifPayload_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* btPayload_BtifPayload_cmdTypeBtif_descriptor_ = NULL;
const ::google::protobuf::Descriptor* btPayload_BtePayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  btPayload_BtePayload_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* btPayload_BtePayload_cmdTypeBte_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_external_2faic_2fbtd_2fbt_2eproto() {
  protobuf_AddDesc_external_2faic_2fbtd_2fbt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "external/aic/btd/bt.proto");
  GOOGLE_CHECK(file != NULL);
  btPayload_descriptor_ = file->message_type(0);
  static const int btPayload_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btPayload, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btPayload, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btPayload, btif_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btPayload, bte_),
  };
  btPayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      btPayload_descriptor_,
      btPayload::default_instance_,
      btPayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btPayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btPayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(btPayload));
  btPayload_BtifPayload_descriptor_ = btPayload_descriptor_->nested_type(0);
  static const int btPayload_BtifPayload_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btPayload_BtifPayload, cmd_),
  };
  btPayload_BtifPayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      btPayload_BtifPayload_descriptor_,
      btPayload_BtifPayload::default_instance_,
      btPayload_BtifPayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btPayload_BtifPayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btPayload_BtifPayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(btPayload_BtifPayload));
  btPayload_BtifPayload_cmdTypeBtif_descriptor_ = btPayload_BtifPayload_descriptor_->enum_type(0);
  btPayload_BtePayload_descriptor_ = btPayload_descriptor_->nested_type(1);
  static const int btPayload_BtePayload_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btPayload_BtePayload, cmd_),
  };
  btPayload_BtePayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      btPayload_BtePayload_descriptor_,
      btPayload_BtePayload::default_instance_,
      btPayload_BtePayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btPayload_BtePayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(btPayload_BtePayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(btPayload_BtePayload));
  btPayload_BtePayload_cmdTypeBte_descriptor_ = btPayload_BtePayload_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_external_2faic_2fbtd_2fbt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    btPayload_descriptor_, &btPayload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    btPayload_BtifPayload_descriptor_, &btPayload_BtifPayload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    btPayload_BtePayload_descriptor_, &btPayload_BtePayload::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_external_2faic_2fbtd_2fbt_2eproto() {
  delete btPayload::default_instance_;
  delete btPayload_reflection_;
  delete btPayload_BtifPayload::default_instance_;
  delete btPayload_BtifPayload_reflection_;
  delete btPayload_BtePayload::default_instance_;
  delete btPayload_BtePayload_reflection_;
}

void protobuf_AddDesc_external_2faic_2fbtd_2fbt_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031external/aic/btd/bt.proto\"\302\t\n\tbtPayloa"
    "d\022\014\n\004addr\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022$\n\004btif\030\003 "
    "\001(\0132\026.btPayload.BtifPayload\022\"\n\003bte\030\005 \001(\013"
    "2\025.btPayload.BtePayload\032\317\007\n\013BtifPayload\022"
    "5\n\003cmd\030\004 \001(\0162\".btPayload.BtifPayload.cmd"
    "TypeBtif:\004INIT\"\210\007\n\013cmdTypeBtif\022\010\n\004INIT\020\000"
    "\022\n\n\006ENABLE\020\001\022\013\n\007DISABLE\020\002\022\013\n\007CLEANUP\020\003\022\032"
    "\n\026GET_ADAPTER_PROPERTIES\020\004\022\030\n\024GET_ADAPTE"
    "R_PROPERTY\020\005\022\030\n\024SET_ADAPTER_PROPERTY\020\006\022 "
    "\n\034GET_REMOTE_DEVICE_PROPERTIES\020\007\022\036\n\032GET_"
    "REMOTE_DEVICE_PROPERTY\020\010\022\036\n\032SET_REMOTE_D"
    "EVICE_PROPERTY\020\t\022\035\n\031GET_REMOTE_SERVICE_R"
    "ECORD\020\n\022\027\n\023GET_REMOTE_SERVICES\020\013\022\023\n\017STAR"
    "T_DISCOVERY\020\014\022\024\n\020CANCEL_DISCOVERY\020\r\022\017\n\013C"
    "REATE_BOND\020\016\022\017\n\013REMOVE_BOND\020\017\022\017\n\013CANCEL_"
    "BOND\020\020\022\r\n\tPIN_REPLY\020\021\022\r\n\tSSP_REPLY\020\022\022\031\n\025"
    "GET_PROFILE_INTERFACE\020\023\022\026\n\022DUT_MODE_CONF"
    "IGURE\020\024\022\021\n\rDUT_MODE_SEND\020\025\022\020\n\014LE_TEST_MO"
    "DE\020\026\022\030\n\024CONFIG_HCI_SNOOP_LOG\020\027\022\037\n\033SET_AD"
    "APTER_PROPERTY_BDNAME\020\030\022\'\n#SET_ADAPTER_P"
    "ROPERTY_SCAN_MODE_NONE\020\031\022.\n*SET_ADAPTER_"
    "PROPERTY_SCAN_MODE_CONNECTABLE\020\032\022;\n7SET_"
    "ADAPTER_PROPERTY_SCAN_MODE_CONNECTABLE_D"
    "ISCOVERABLE\020\033\022-\n)SET_ADAPTER_PROPERTY_DI"
    "SCOVERY_TIMEOUT_2M\020\034\022-\n)SET_ADAPTER_PROP"
    "ERTY_DISCOVERY_TIMEOUT_5M\020\035\022-\n)SET_ADAPT"
    "ER_PROPERTY_DISCOVERY_TIMEOUT_1H\020\036\022-\n)SE"
    "T_ADAPTER_PROPERTY_DISCOVERY_TIMEOUT_NE\020"
    "\037\032}\n\nBtePayload\0226\n\003cmd\030\006 \001(\0162 .btPayload"
    ".BtePayload.cmdTypeBte:\007INQ_RES\"7\n\ncmdTy"
    "peBte\022\013\n\007INQ_RES\020d\022\016\n\nBOND_STATE\020e\022\014\n\010DI"
    "SC_RES\020f", 1248);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "external/aic/btd/bt.proto", &protobuf_RegisterTypes);
  btPayload::default_instance_ = new btPayload();
  btPayload_BtifPayload::default_instance_ = new btPayload_BtifPayload();
  btPayload_BtePayload::default_instance_ = new btPayload_BtePayload();
  btPayload::default_instance_->InitAsDefaultInstance();
  btPayload_BtifPayload::default_instance_->InitAsDefaultInstance();
  btPayload_BtePayload::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_external_2faic_2fbtd_2fbt_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_external_2faic_2fbtd_2fbt_2eproto {
  StaticDescriptorInitializer_external_2faic_2fbtd_2fbt_2eproto() {
    protobuf_AddDesc_external_2faic_2fbtd_2fbt_2eproto();
  }
} static_descriptor_initializer_external_2faic_2fbtd_2fbt_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* btPayload_BtifPayload_cmdTypeBtif_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return btPayload_BtifPayload_cmdTypeBtif_descriptor_;
}
bool btPayload_BtifPayload_cmdTypeBtif_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::INIT;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::ENABLE;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::DISABLE;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::CLEANUP;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::GET_ADAPTER_PROPERTIES;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::GET_ADAPTER_PROPERTY;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::SET_ADAPTER_PROPERTY;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::GET_REMOTE_DEVICE_PROPERTIES;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::GET_REMOTE_DEVICE_PROPERTY;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::SET_REMOTE_DEVICE_PROPERTY;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::GET_REMOTE_SERVICE_RECORD;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::GET_REMOTE_SERVICES;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::START_DISCOVERY;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::CANCEL_DISCOVERY;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::CREATE_BOND;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::REMOVE_BOND;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::CANCEL_BOND;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::PIN_REPLY;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::SSP_REPLY;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::GET_PROFILE_INTERFACE;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::DUT_MODE_CONFIGURE;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::DUT_MODE_SEND;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::LE_TEST_MODE;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::CONFIG_HCI_SNOOP_LOG;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::SET_ADAPTER_PROPERTY_BDNAME;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::SET_ADAPTER_PROPERTY_SCAN_MODE_NONE;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::SET_ADAPTER_PROPERTY_SCAN_MODE_CONNECTABLE;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::SET_ADAPTER_PROPERTY_SCAN_MODE_CONNECTABLE_DISCOVERABLE;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::SET_ADAPTER_PROPERTY_DISCOVERY_TIMEOUT_2M;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::SET_ADAPTER_PROPERTY_DISCOVERY_TIMEOUT_5M;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::SET_ADAPTER_PROPERTY_DISCOVERY_TIMEOUT_1H;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::SET_ADAPTER_PROPERTY_DISCOVERY_TIMEOUT_NE;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::cmdTypeBtif_MIN;
const btPayload_BtifPayload_cmdTypeBtif btPayload_BtifPayload::cmdTypeBtif_MAX;
const int btPayload_BtifPayload::cmdTypeBtif_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int btPayload_BtifPayload::kCmdFieldNumber;
#endif  // !_MSC_VER

btPayload_BtifPayload::btPayload_BtifPayload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void btPayload_BtifPayload::InitAsDefaultInstance() {
}

btPayload_BtifPayload::btPayload_BtifPayload(const btPayload_BtifPayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void btPayload_BtifPayload::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

btPayload_BtifPayload::~btPayload_BtifPayload() {
  SharedDtor();
}

void btPayload_BtifPayload::SharedDtor() {
  if (this != default_instance_) {
  }
}

void btPayload_BtifPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* btPayload_BtifPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return btPayload_BtifPayload_descriptor_;
}

const btPayload_BtifPayload& btPayload_BtifPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_external_2faic_2fbtd_2fbt_2eproto();  return *default_instance_;
}

btPayload_BtifPayload* btPayload_BtifPayload::default_instance_ = NULL;

btPayload_BtifPayload* btPayload_BtifPayload::New() const {
  return new btPayload_BtifPayload;
}

void btPayload_BtifPayload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool btPayload_BtifPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .btPayload.BtifPayload.cmdTypeBtif cmd = 4 [default = INIT];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::btPayload_BtifPayload_cmdTypeBtif_IsValid(value)) {
            set_cmd(static_cast< ::btPayload_BtifPayload_cmdTypeBtif >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void btPayload_BtifPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .btPayload.BtifPayload.cmdTypeBtif cmd = 4 [default = INIT];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->cmd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* btPayload_BtifPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .btPayload.BtifPayload.cmdTypeBtif cmd = 4 [default = INIT];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->cmd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int btPayload_BtifPayload::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .btPayload.BtifPayload.cmdTypeBtif cmd = 4 [default = INIT];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void btPayload_BtifPayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const btPayload_BtifPayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const btPayload_BtifPayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void btPayload_BtifPayload::MergeFrom(const btPayload_BtifPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void btPayload_BtifPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void btPayload_BtifPayload::CopyFrom(const btPayload_BtifPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool btPayload_BtifPayload::IsInitialized() const {
  
  return true;
}

void btPayload_BtifPayload::Swap(btPayload_BtifPayload* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata btPayload_BtifPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = btPayload_BtifPayload_descriptor_;
  metadata.reflection = btPayload_BtifPayload_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* btPayload_BtePayload_cmdTypeBte_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return btPayload_BtePayload_cmdTypeBte_descriptor_;
}
bool btPayload_BtePayload_cmdTypeBte_IsValid(int value) {
  switch(value) {
    case 100:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const btPayload_BtePayload_cmdTypeBte btPayload_BtePayload::INQ_RES;
const btPayload_BtePayload_cmdTypeBte btPayload_BtePayload::BOND_STATE;
const btPayload_BtePayload_cmdTypeBte btPayload_BtePayload::DISC_RES;
const btPayload_BtePayload_cmdTypeBte btPayload_BtePayload::cmdTypeBte_MIN;
const btPayload_BtePayload_cmdTypeBte btPayload_BtePayload::cmdTypeBte_MAX;
const int btPayload_BtePayload::cmdTypeBte_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int btPayload_BtePayload::kCmdFieldNumber;
#endif  // !_MSC_VER

btPayload_BtePayload::btPayload_BtePayload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void btPayload_BtePayload::InitAsDefaultInstance() {
}

btPayload_BtePayload::btPayload_BtePayload(const btPayload_BtePayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void btPayload_BtePayload::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

btPayload_BtePayload::~btPayload_BtePayload() {
  SharedDtor();
}

void btPayload_BtePayload::SharedDtor() {
  if (this != default_instance_) {
  }
}

void btPayload_BtePayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* btPayload_BtePayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return btPayload_BtePayload_descriptor_;
}

const btPayload_BtePayload& btPayload_BtePayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_external_2faic_2fbtd_2fbt_2eproto();  return *default_instance_;
}

btPayload_BtePayload* btPayload_BtePayload::default_instance_ = NULL;

btPayload_BtePayload* btPayload_BtePayload::New() const {
  return new btPayload_BtePayload;
}

void btPayload_BtePayload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 100;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool btPayload_BtePayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .btPayload.BtePayload.cmdTypeBte cmd = 6 [default = INQ_RES];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::btPayload_BtePayload_cmdTypeBte_IsValid(value)) {
            set_cmd(static_cast< ::btPayload_BtePayload_cmdTypeBte >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void btPayload_BtePayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .btPayload.BtePayload.cmdTypeBte cmd = 6 [default = INQ_RES];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->cmd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* btPayload_BtePayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .btPayload.BtePayload.cmdTypeBte cmd = 6 [default = INQ_RES];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->cmd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int btPayload_BtePayload::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .btPayload.BtePayload.cmdTypeBte cmd = 6 [default = INQ_RES];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void btPayload_BtePayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const btPayload_BtePayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const btPayload_BtePayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void btPayload_BtePayload::MergeFrom(const btPayload_BtePayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void btPayload_BtePayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void btPayload_BtePayload::CopyFrom(const btPayload_BtePayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool btPayload_BtePayload::IsInitialized() const {
  
  return true;
}

void btPayload_BtePayload::Swap(btPayload_BtePayload* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata btPayload_BtePayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = btPayload_BtePayload_descriptor_;
  metadata.reflection = btPayload_BtePayload_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string btPayload::_default_addr_;
const ::std::string btPayload::_default_name_;
#ifndef _MSC_VER
const int btPayload::kAddrFieldNumber;
const int btPayload::kNameFieldNumber;
const int btPayload::kBtifFieldNumber;
const int btPayload::kBteFieldNumber;
#endif  // !_MSC_VER

btPayload::btPayload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void btPayload::InitAsDefaultInstance() {
  btif_ = const_cast< ::btPayload_BtifPayload*>(&::btPayload_BtifPayload::default_instance());
  bte_ = const_cast< ::btPayload_BtePayload*>(&::btPayload_BtePayload::default_instance());
}

btPayload::btPayload(const btPayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void btPayload::SharedCtor() {
  _cached_size_ = 0;
  addr_ = const_cast< ::std::string*>(&_default_addr_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  btif_ = NULL;
  bte_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

btPayload::~btPayload() {
  SharedDtor();
}

void btPayload::SharedDtor() {
  if (addr_ != &_default_addr_) {
    delete addr_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete btif_;
    delete bte_;
  }
}

void btPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* btPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return btPayload_descriptor_;
}

const btPayload& btPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_external_2faic_2fbtd_2fbt_2eproto();  return *default_instance_;
}

btPayload* btPayload::default_instance_ = NULL;

btPayload* btPayload::New() const {
  return new btPayload;
}

void btPayload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (addr_ != &_default_addr_) {
        addr_->clear();
      }
    }
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (btif_ != NULL) btif_->::btPayload_BtifPayload::Clear();
    }
    if (_has_bit(3)) {
      if (bte_ != NULL) bte_->::btPayload_BtePayload::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool btPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_btif;
        break;
      }
      
      // optional .btPayload.BtifPayload btif = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_btif:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_btif()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bte;
        break;
      }
      
      // optional .btPayload.BtePayload bte = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bte:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bte()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void btPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string addr = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->addr(), output);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional .btPayload.BtifPayload btif = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->btif(), output);
  }
  
  // optional .btPayload.BtePayload bte = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bte(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* btPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string addr = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }
  
  // optional string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional .btPayload.BtifPayload btif = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->btif(), target);
  }
  
  // optional .btPayload.BtePayload bte = 5;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bte(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int btPayload::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .btPayload.BtifPayload btif = 3;
    if (has_btif()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->btif());
    }
    
    // optional .btPayload.BtePayload bte = 5;
    if (has_bte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bte());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void btPayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const btPayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const btPayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void btPayload::MergeFrom(const btPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_addr(from.addr());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      mutable_btif()->::btPayload_BtifPayload::MergeFrom(from.btif());
    }
    if (from._has_bit(3)) {
      mutable_bte()->::btPayload_BtePayload::MergeFrom(from.bte());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void btPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void btPayload::CopyFrom(const btPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool btPayload::IsInitialized() const {
  
  return true;
}

void btPayload::Swap(btPayload* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(name_, other->name_);
    std::swap(btif_, other->btif_);
    std::swap(bte_, other->bte_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata btPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = btPayload_descriptor_;
  metadata.reflection = btPayload_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
